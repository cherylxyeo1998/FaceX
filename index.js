var request = require('request');
var polka = require('polka');
var math = require('mathjs');
var fs = require('fs')
var getusermedia = require('getusermedia')

// request cannot handle too many requests at once so split into smaller lists
var labels = ['Adam', 'Aiken Chia', 'Aleksandar Duric', 'Alison Brie', 'Amos Yee', 'Arden Cho', 'Austin', 'Barack Obama', 'Benedict Wong', 'Bruce Lee', 'Cheryl Yeo', 'Chevy Chase', 'Chris Hemsworth', 'Constance Wu', 'Daniel Henney', 'Daniel Kim', 'Daniel Radcliffe', 'Dee Kosh', 'Donald Glover', 'Donnie Yen', 'Dwyane Johnson', 'Gilian Jacobs', 'Godfrey Gao', 'Henry Golding', 'Ice Cube', 'Jackie Chan', 'Jamie Chung', 'Jason Sudekis', 'Jay Chou', 'Jennifer Lawrence', 'Jet Li', 'Jim Rash', 'JJ Lin', 'Joel Mchale', 'Keanu Reeves', 'Ken Jeong', 'Kenan Thompson', 'Kevin Hart', 'Lilly Singh', 'Lucy Liu', 'Michelle NOC', 'Na Ying', 'ramdom010', 'ramdom010 - Copy', 'ramdom010 - Copy (2)', 'Randall Park', 'random001', 'random001 - Copy', 'random001 - Copy (2)', 'random002', 'random002 - Copy', 'random002 - Copy (2)', 'random003', 'random003 - Copy', 'random003 - Copy (2)', 'random004', 'random004 - Copy', 'random004 - Copy (2)', 'random005', 'random005 - Copy', 'random005 - Copy (2)', 'random006', 'random006 - Copy', 'random006 - Copy (2)', 'random007', 'random007 - Copy', 'random007 - Copy (2)', 'random008', 'random008 - Copy', 'random008 - Copy (2)', 'random009', 'random009 - Copy', 'random009 - Copy (2)', 'random011', 'random011 - Copy', 'random012', 'random012 - Copy', 'random013', 'random013 - Copy', 'random014', 'random014 - Copy', 'random015', 'random015 - Copy', 'random016', 'random016 - Copy', 'random017', 'random017 - Copy', 'random018', 'random018 - Copy', 'random019', 'random019 - Copy', 'random020', 'random020 - Copy', 'Rao ZiJie', 'Ryan NOC', 'Steve Harvey', 'Steven Yuen', 'Sylvia Chan', 'Tosh Zhang', 'Vin Zhang']
var labels1 = labels.slice(0,10)
var labels2 = labels.slice(10,20)
var labels3 = labels.slice(20,30)
var labels4 = labels.slice(30,40)
var labels5 = labels.slice(40,50)
var labels6 = labels.slice(50,60)
var labels7 = labels.slice(60,70)
var labels8 = labels.slice(70,80)
var labels9 = labels.slice(80,90)
var labels10 = labels.slice(90,100)

// create polka instance
var app = polka()

// reformats whitespace to %20 to fit into URL
function reformat(x) {
    if (x.includes(' ')) {
        var y = x.replace(' ','%20')
        return y
    } else {
        return x
    }
}

// generate request options based on person name
function genOptions(name) {
    var url = `https://raw.githubusercontent.com/adumbz/faceapijs/master/${reformat(name)}/001.jpg`
    var options = {
        'method':'POST',
        'url':'http://facexapi.com/get_face_vec?face_det=1',
        'headers':{
            'user_id':'5def6cea6ea12f126fdd4ce1'
        },
        formData: {
            'img':url
        }
    }
    return options
}

// generate JSON file containing face vector of person
async function save(labellist) {
    labellist.forEach((item)=>{
        request(genOptions(item), (error, response) => {
            console.log(item + '\n' +response.body)
            var data = JSON.stringify(response.body, null, 2)
            fs.writeFile(`json/${item}.json`, data, (err) => {
                if (err) console.log(err)
                console.log('data written to file')
            })
        }
        )
    }
    )
}

app
    .get('/genvectors', (req, res) => {
        Promise.all([
            save(labels10)
        ]).then(res.end('done'))
        
    })
    .get('/', (req, res) => {
        res.writeHead(200, {
            'content-type' :'text/html'
        })
        fs.readFile('main.html',null, function (error,data) {
            if (error) {
                res.writeHead(404)
                res.write('Whoops file not found')
            } else {
                res.write(data)
            }
        })
    })
    .listen(3000, err =>{
        if (err) throw err;
        console.log(`> Running on localhost:3000`)
    })



// move to vectors.json
var refAdam = [-0.11323137581348419, 0.06762012839317322, 0.08405587077140808, 0.026411641389131546, -0.11375103890895844, 0.0005734739825129509, -0.07209789007902145, -0.0884266272187233, 0.11684586107730865, -0.05578644201159477, 0.22672191262245178, 0.03401412069797516, -0.1884234994649887, -0.022588282823562622, 0.004099484533071518, 0.15555864572525024, -0.10880208760499954, -0.09033417701721191, 0.019789183512330055, 0.01564743183553219, 0.10929398983716965, 0.0021215975284576416, -0.00881163403391838, 0.037052154541015625, -0.20452934503555298, -0.30742427706718445, -0.07096105068922043, -0.035628046840429306, -0.0684441402554512, -0.0918349176645279, -0.056211017072200775, 0.017854202538728714, -0.138766810297966, 0.010790267027914524, 0.027120549231767654, 0.03663831949234009, 0.016206614673137665, -0.015133164823055267, 0.17255961894989014, 0.08442031592130661, -0.27332234382629395, 0.0748361125588417, -0.011467024683952332, 0.23714739084243774, 0.19278298318386078, 0.03824426233768463, 0.05018896609544754, -0.1403805911540985, 0.10761898756027222, -0.23102666437625885, 0.09551279991865158, 0.09167815744876862, 0.06652067601680756, -0.010557349771261215, -0.0036924071609973907, -0.11322091519832611, -0.08676756918430328, 0.09833969920873642, -0.1799250990152359, 0.05681192874908447, 0.059828981757164, -0.08621134608983994, -0.00668332539498806, -0.12635815143585205, 0.17059633135795593, 0.17092162370681763, -0.10061519593000412, -0.1681741178035736, 0.07001226395368576, -0.14568591117858887, -0.1365518569946289, 0.06101520359516144, -0.09761135280132294, -0.21275998651981354, -0.33514276146888733, 0.03531757369637489, 0.4278242290019989, 0.12561079859733582, -0.23098944127559662, 0.024920962750911713, -0.07351596653461456, -0.013483833521604538, 0.11258967220783234, 0.11726303398609161, 0.01796795055270195, 0.019806865602731705, -0.02141793631017208, -0.0047097355127334595, 0.2772235870361328, -0.030058234930038452, -0.05048077180981636, 0.22720816731452942, -0.005584133788943291, 0.07346508651971817, 0.020076453685760498, 0.042661331593990326, -0.052155207842588425, 0.01841038279235363, -0.07553612440824509, -0.08770428597927094, -0.03514653816819191, -0.02975238673388958, 0.09364554286003113, 0.11606363952159882, -0.256562739610672, 0.18161706626415253, -0.011572891846299171, 0.009883910417556763, 0.06105492636561394, 0.07326558232307434, -0.10124535858631134, -0.03226387873291969, 0.11219115555286407, -0.2819375991821289, 0.2050272673368454, 0.14973804354667664, 0.052144624292850494, 0.12077514827251434, 0.07236740738153458, 0.07549722492694855, -0.023005135357379913, 0.02697671949863434, -0.12806111574172974, 0.005220778286457062, 0.08757529407739639, -0.03181867301464081, 0.13412727415561676, 0.030383534729480743]
var testAdam = [-0.15047715604305267, 0.09384316951036453, 0.05338806286454201, -0.03162400424480438, -0.09646813571453094, -0.04014208912849426, -0.064425528049469, -0.13780450820922852, 0.10811687260866165, -0.10285297781229019, 0.2274799346923828, -0.05242786556482315, -0.19556285440921783, -0.041049838066101074, -0.013685274869203568, 0.10836303234100342, -0.07798285037279129, -0.13071686029434204, -0.003515385091304779, 0.016764558851718903, 0.14946120977401733, 0.005230465903878212, -0.029363589361310005, 0.03317735344171524, -0.1760919690132141, -0.2939148545265198, -0.11105617880821228, -0.032291896641254425, -0.07462983578443527, -0.05973753705620766, 0.02639584243297577, 0.011729832738637924, -0.1655712127685547, -0.019481107592582703, -0.0026829391717910767, 0.025518370792269707, 0.02743264101445675, -0.0083543062210083, 0.1914147138595581, 0.04832442104816437, -0.2468835562467575, 0.01443716511130333, 0.011703751981258392, 0.22207114100456238, 0.15776559710502625, 0.041092924773693085, 0.01429513655602932, -0.08992249518632889, 0.06306064128875732, -0.22914792597293854, 0.0414980873465538, 0.1301707923412323, 0.056378960609436035, 0.011158283799886703, 0.002263342496007681, -0.12246350198984146, -0.009671367704868317, 0.06107018142938614, -0.12434982508420944, 0.04698172211647034, 0.04453663527965546, -0.08976611495018005, -0.0327194444835186, -0.04705609381198883, 0.17331203818321228, 0.1064964160323143, -0.09432247281074524, -0.1863553524017334, 0.07971016317605972, -0.13458183407783508, -0.1513572633266449, 0.0878451019525528, -0.12299571186304092, -0.18265120685100555, -0.3261481821537018, 0.01980583928525448, 0.4508216977119446, 0.09861426055431366, -0.2605990171432495, 0.03253602236509323, -0.095237135887146, -0.011485139839351177, 0.11402766406536102, 0.07819658517837524, 0.02347877249121666, 0.0015916526317596436, -0.10950185358524323, -0.03186552971601486, 0.2698248624801636, -0.03654766082763672, -0.08530455827713013, 0.23939715325832367, 0.009238209575414658, 0.09842409193515778, 0.032967709004879, 0.06082667410373688, -0.0571603886783123, -0.007043212652206421, -0.07053226232528687, -0.08969766646623611, 0.07118798792362213, 0.000867702066898346, -3.848224878311157e-06, 0.17431411147117615, -0.2321212887763977, 0.21775780618190765, -0.010309582576155663, 0.022717192769050598, 0.007722459267824888, 0.0654597282409668, -0.09456910192966461, -0.019206397235393524, 0.11272674053907394, -0.1945178508758545, 0.15528586506843567, 0.16038797795772552, 0.025659363716840744, 0.09985306859016418, 0.12969815731048584, 0.03548037260770798, -0.004051498137414455, 0.05644460767507553, -0.17097243666648865, -0.07517020404338837, 0.04139160364866257, -0.007856017909944057, 0.08939109742641449, 0.030254343524575233]
var final = []
for (var i=0;i<=testAdam.length-1;i++) {
    final.push(refAdam[i]-testAdam[i])
}
// console.log(math.norm(final))
// ^^^^^^^^^^^^^^^^^^
